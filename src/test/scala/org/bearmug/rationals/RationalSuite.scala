package org.bearmug.rationals

/*
 * This Scala Testsuite was auto generated by running 'gradle init --type scala-library'
 * by 'pavel' at '9/18/16 11:31 PM' with Gradle 2.12
 *
 * @author pavel, @date 9/18/16 11:31 PM
 */

import org.junit.runner.RunWith
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class RationalSuite extends FunSuite {

  test("toString produces concise output") {
    assert(Rational(1, 2).toString == "1/2")
    assert(RationalJ.rational(1, 2).toString == "1/2")
  }

  test("shortcut apply without denominator works fine") {
    assert(Rational(10).toString == "10/1")
    assert(RationalJ.rational(10).toString == "10/1")
  }

  test("negation works fine and concise") {
    assert((-Rational(10, 7)).toString == "-10/7")
    assert(RationalJ.rational(10, 7).negateUnary().toString == "-10/7")
  }

  test("multiplication works as expected") {
    assert((Rational(3, 2) * Rational(7, 5)).toString == Rational(21, 10).toString)
    assert(RationalJ.rational(3, 2).multiply(RationalJ.rational(7, 5)).toString == RationalJ.rational(21, 10).toString)
  }

  test("division works as expected") {
    assert((Rational(3, 2) / Rational(7, 5)).toString == Rational(15, 14).toString)
    assert(RationalJ.rational(3, 2).divide(RationalJ.rational(7, 5)).toString == RationalJ.rational(15, 14).toString)
  }

  test("new rationals not simplified") {
    assert(Rational(6, 4).toString == "6/4")
    assert(RationalJ.rational(6, 4).toString == "6/4")
  }

  ignore("multiplication output simplified") {
    assert((Rational(2, 4) * Rational(4, 10)).toString == "1/5")
    assert(RationalJ.rational(2, 4).multiply(RationalJ.rational(4, 10)).toString == RationalJ.rational(1, 5).toString)
  }
}
